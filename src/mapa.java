import java.util.*;
import java.util.function.Function;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author U439944
 */
public class mapa extends javax.swing.JFrame {
    
    
    //zmienne globalne 
    String test;
    int startX = 1, startY = 4, stopX = 8, stopY = 9;
    int wys, szer;

    /**
     * Creates new form mapa
     */
    public mapa() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        start_x = new javax.swing.JTextField();
        start_y = new javax.swing.JTextField();
        stop_x = new javax.swing.JTextField();
        stop_y = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        wysokosc = new javax.swing.JTextField();
        szerokosc = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea3.setEditable(false);
        jTextArea3.setColumns(20);
        jTextArea3.setRows(5);
        jTextArea3.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jTextArea3AncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jScrollPane3.setViewportView(jTextArea3);

        start_x.setText("1");
        start_x.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                start_xActionPerformed(evt);
            }
        });
        start_x.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                start_xKeyReleased(evt);
            }
        });

        start_y.setText("4");
        start_y.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                start_yKeyReleased(evt);
            }
        });

        stop_x.setText("8");
        stop_x.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stop_xActionPerformed(evt);
            }
        });
        stop_x.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                stop_xKeyReleased(evt);
            }
        });

        stop_y.setText("9");
        stop_y.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                stop_yKeyReleased(evt);
            }
        });

        jButton1.setText("Uruchom");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Start");

        jLabel2.setText("Koniec");

        jLabel3.setText("x");

        jLabel4.setText("y");

        jLabel5.setText("Przed uruchomieniem podaj współrzędne punktów");

        jLabel6.setText("Wyznaczone kierunki");

        jLabel7.setText("Wartość przejścia");

        jLabel8.setText("Ścieżka przejścia");

        wysokosc.setEnabled(false);
        wysokosc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wysokoscActionPerformed(evt);
            }
        });
        wysokosc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                wysokoscKeyReleased(evt);
            }
        });

        szerokosc.setEnabled(false);
        szerokosc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                szerokoscKeyReleased(evt);
            }
        });

        jLabel9.setText("Wysokość");

        jLabel10.setText("Szerokość");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jButton1))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                                    .addComponent(jLabel10))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(szerokosc)
                                    .addComponent(wysokosc)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(jLabel3))
                                    .addComponent(start_x, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                                    .addComponent(stop_x))
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(16, 16, 16)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(start_y))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(stop_y)))
                                .addGap(16, 16, 16)))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(start_x, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(start_y, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(stop_x, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(stop_y, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(wysokosc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel9))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(szerokosc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel10))
                                .addGap(48, 48, 48)
                                .addComponent(jButton1))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 629, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jLabel6)
                        .addGap(173, 173, 173)
                        .addComponent(jLabel7)
                        .addGap(157, 157, 157)
                        .addComponent(jLabel8)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void start_xActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_start_xActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_start_xActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       
        // Na te pola nie bedzie mozna wejsc
        ArrayList<Node> walls = new ArrayList<>(Arrays.asList(
                new Node(1, 7),
                new Node(1, 8),
                new Node(2, 7),
                new Node(2, 8),
                new Node(3, 7),
                new Node(3, 8))
        );

        // Te pola beda trudniejsze do wejscia (np. gory albo bagno)
        List<Node> hardTerrain = new ArrayList<>(Arrays.asList(
                new Node(3, 4), new Node(3, 5), new Node(4, 1), new Node(4, 2),
                new Node(4, 3), new Node(4, 4), new Node(4, 5), new Node(4, 6),
                new Node(4, 7), new Node(4, 8), new Node(5, 1), new Node(5, 2),
                new Node(5, 3), new Node(5, 4), new Node(5, 5), new Node(5, 6),
                new Node(5, 7), new Node(5, 8), new Node(6, 2), new Node(6, 3),
                new Node(6, 4), new Node(6, 5), new Node(6, 6), new Node(6, 7),
                new Node(7, 3), new Node(7, 4), new Node(7, 5))
        );
        Map<Node, Integer> weights = new HashMap<>();
        for (Node t : hardTerrain) {
            weights.put(t, 5); // wszystkie trudne pola maja wage 5, ale moglyby miec rozne
        }

        Graph graph = new Graph(10, 10, walls, weights);
        //Graph graph = new Graph(wys, szer, walls, weights);
        try{
        AStar aStar = new AStar(graph, new Node(startX, startY), new Node(stopX, stopY));
        
        AStar.Result result = aStar.search();
        System.out.println("Wyznaczone kierunki: ");
        result.drawDirections();
        System.out.println("\nWartosc przejscia: ");
        result.drawCost();
        System.out.println("\nSciezka przejscia: ");
        result.drawPath();
        }
        catch(IllegalArgumentException e){
            jLabel5.setVisible(true);
            jLabel5.setText("Jeden ze współrzędnych punktów start/koniec jest w ścianie lub po za grafem");
        }
       
 
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextArea3AncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jTextArea3AncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextArea3AncestorAdded

    private void start_xKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_start_xKeyReleased
try{
 test = start_x.getText().trim();
 startX = Integer.parseInt(test);
 jLabel5.setText("...");
}
catch(NumberFormatException e){
jLabel5.setVisible(true);
jLabel5.setText("Zły format liczby!");
}
        // TODO add your handling code here:
    }//GEN-LAST:event_start_xKeyReleased

    private void start_yKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_start_yKeyReleased
try{
 test = start_y.getText().trim();
 startY = Integer.parseInt(test);
 jLabel5.setText("...");
}
catch(NumberFormatException e){
jLabel5.setVisible(true);
jLabel5.setText("Zły format liczby!");
}
        // TODO add your handling code here:
    }//GEN-LAST:event_start_yKeyReleased

    private void stop_yKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_stop_yKeyReleased
try{
 test = stop_y.getText().trim();
 stopY = Integer.parseInt(test);
 jLabel5.setText("...");
}
catch(NumberFormatException e){
jLabel5.setVisible(true);
jLabel5.setText("Zły format liczby!");
}
        // TODO add your handling code here:
    }//GEN-LAST:event_stop_yKeyReleased

    private void stop_xKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_stop_xKeyReleased
        try{
            test = stop_x.getText().trim();
            stopX = Integer.parseInt(test);
            jLabel5.setText("...");
        }
        catch(NumberFormatException e){
            jLabel5.setVisible(true);
            jLabel5.setText("Zły format liczby!");
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_stop_xKeyReleased

    private void stop_xActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stop_xActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_stop_xActionPerformed

    private void wysokoscActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wysokoscActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_wysokoscActionPerformed

    private void wysokoscKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_wysokoscKeyReleased
 try{
            test = wysokosc.getText().trim();
            wys = Integer.parseInt(test);
            jLabel5.setText("...");
        }
        catch(NumberFormatException e){
            jLabel5.setVisible(true);
            jLabel5.setText("Zły format liczby!");
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_wysokoscKeyReleased

    private void szerokoscKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_szerokoscKeyReleased
try{
            test = szerokosc.getText().trim();
            szer = Integer.parseInt(test);
            jLabel5.setText("...");
        }
        catch(NumberFormatException e){
            jLabel5.setVisible(true);
            jLabel5.setText("Zły format liczby!");
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_szerokoscKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mapa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mapa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mapa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mapa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new mapa().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextField start_x;
    private javax.swing.JTextField start_y;
    private javax.swing.JTextField stop_x;
    private javax.swing.JTextField stop_y;
    private javax.swing.JTextField szerokosc;
    private javax.swing.JTextField wysokosc;
    // End of variables declaration//GEN-END:variables

public class AStar {

    private Graph graph;
    private Node start;
    private Node goal;

    public AStar(Graph graph, Node start, Node goal) {
        if (!graph.isPassable(start) || !graph.inBounds(start)) {
            throw new IllegalArgumentException("Start node is wrong");
        }
        if (!graph.isPassable(goal) || !graph.inBounds(goal)) {
            throw new IllegalArgumentException("Goal node is wrong");
        }

        this.graph = graph;
        this.start = start;
        this.goal = goal;
    }

    /**
     * Prosta heurystyka do estymacji kosztu przejscia z wezla a do b
     *
     * @param a Wezel startowy
     * @param b Wezel docelowy
     * @return szacowany koszt przejscia
     */
    private float manhattanDistance(Node a, Node b) {
        return Math.abs(a.x - b.x) + Math.abs(a.y - b.y);
    }

    /**
     * Implementacja algorytmu A*
     *
     * @return Kierunek i koszt poruszania
     */
    Result search() {
        Queue<Node> frontier = new PriorityQueue<>(Node.COMP_PRIORITY);
        frontier.add(start);
        Map<Node, Node> cameFrom = new HashMap<>();
        Map<Node, Integer> costSoFar = new HashMap<>();
        cameFrom.put(start, null);
        costSoFar.put(start, 0);

        while (!frontier.isEmpty()) {
            Node current = frontier.poll();

            if (current.equals(goal)) {
                break;
            }

            for (Node next : graph.neighbours(current)) {
                int newCost = (int) (costSoFar.get(current) + graph.cost(current, next));
                if (!costSoFar.containsKey(next) || newCost < costSoFar.get(next)) {
                    costSoFar.put(next, newCost);
                    next.priority = newCost + manhattanDistance(goal, next);
                    frontier.add(next);
                    cameFrom.put(next, current);
                }
            }
        }

        return new Result(cameFrom, costSoFar);
    }

         class Result {
         /**
         * Trzyma informacje ktory wezel (wartosc HashMapy) prowadzi do zadanego (klucz HashMapy)
         */
        Map<Node, Node> pointTo;
        String end = "";
        //String space = "\n";
        /**
         * Przechowuje calkowity kosz dostania sie do zadanego wezla
         */
        Map<Node, Integer> moveCost;

        Result(Map<Node, Node> pointTo, Map<Node, Integer> moveCost) {
            this.pointTo = pointTo;
            this.moveCost = moveCost;
        }

        /**
         * Wypisz znaleziona sciezke za pomoca @
         */
        void drawPath() {

            // Trzeba odtworzyc sciezke poruszania sie od ostatniego do pierwszego wezla
            Node current = goal;
            List<Node> path = new ArrayList<>();
            path.add(goal);

            while (!current.equals(start)) {
                current = pointTo.get(current);
                path.add(current);
            }
            path.add(start);
            Collections.reverse(path);

            draw(node -> {
                String s = null;
                if (path.contains(node)) {
                    s = "*";
                }
                return s;
            });
        }

        /**
         * Wypisz wyliczone kierunki za pomoca strzalek
         */
        void drawDirections() {
            draw(node -> {
                String s = null;
                Node pointed = pointTo.getOrDefault(node, null);

                // Wybierz strzalke na podstawie pozycji poprzedniego wezla
                if (pointed != null) {
                    if (pointed.x == node.x + 1) {
                        s = "\u2192";
                    } else if (pointed.x == node.x - 1) {
                        s = "\u2190";
                    } else if (pointed.y == node.y + 1) {
                        s = "\u2193";
                    } else if (pointed.y == node.y - 1) {
                        s = "\u2191";
                    }
                }
                return s;
            });
        }

        /**
         * Wypisz wyliczony koszt liczbowy
         */
        void drawCost() {
            draw(node -> {
               String s = null;
                int cost = moveCost.getOrDefault(node, Integer.MIN_VALUE);
                if (cost != Integer.MIN_VALUE) {
                    s = Integer.toString(cost);
                }
                return s;
            });
        }

        /**
         * Wypisuje rozwiazanie w postaci: A dla wezla startowego, Z dla wezla koncowego,
         * . dla wezla nieodwiedzonego, # dla wezla, ktory jest sciana
         *
         * @param method Dodatkowa metoda formatujaca, w zaleznosci co uzytkownik chce wypisac
         */
        private void draw(Function<Node, String> method) {
        
            for (int y = 0; y < graph.getHeight(); y++) {
                for (int x = 0; x < graph.getWidth(); x++) {
                    Node current = new Node(x, y);
                    String r = ".";

                    String c = method.apply(current);
                    if (c != null) {
                        r = c;
                    }

                    if (start.equals(current)) {
                        r = "A";
                    }
                    if (goal.equals(current)) {
                        r = "Z";
                    }
                    if (!graph.isPassable(current)) {
                        r = "#";
                    }

                    System.out.print(String.format("%3s", r));
                    end += (String.format("%6s", r));
                    
                }
                System.out.print('\n');
               end += '\n';
            }
            
            end += '\n';
            end += '\n';
            jTextArea3.setText(end);
            //jTextArea3.setText(space);
        }
    }
}

}
